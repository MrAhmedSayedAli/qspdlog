name: Build Linux

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build_docker_image:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2.11.1
        id: docker_image_update
        with:
          filters: |
            src:
              - 'ci/docker/**'
              - '.github/workflows/docker-image.yml'

      - name: Log in to Docker Hub
        uses: docker/login-action@v2.1.0
        if: steps.docker_image_update.outputs.src == 'true'
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to the Container registry
        uses: docker/login-action@v2.1.0
        if: steps.docker_image_update.outputs.src == 'true'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.1.1
        if: steps.docker_image_update.outputs.src == 'true'
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest

      - name: Build and push Docker images
        uses: docker/build-push-action@v3.2.0
        if: steps.docker_image_update.outputs.src == 'true'
        with:
          context: .
          file: ci/docker/Dockerfile.base
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}:latest
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    needs: [build_docker_image]
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Configure
        run: |
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=ON

      - name: Build
        run: |
          cmake --build build -j

      # Testing is disabled because it requires a running X server
      # - name: Test
      #   run: |
      #     ctest --output-on-failure -j --test-dir build

      # Not yet uploading the artifacts
      # - name: Upload artifacts
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: linux-build
      #     path: build
